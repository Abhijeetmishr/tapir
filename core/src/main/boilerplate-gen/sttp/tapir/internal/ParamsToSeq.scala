// auto-generated by sbt-boilerplate
package sttp.tapir.internal

private[tapir] object ParamsToSeq {
  def apply[T](a: Any): Seq[_] = {
    a match {
      case (v1, v2) => Seq(v1, v2)
      case (v1, v2, v3) => Seq(v1, v2, v3)
      case (v1, v2, v3, v4) => Seq(v1, v2, v3, v4)
      case (v1, v2, v3, v4, v5) => Seq(v1, v2, v3, v4, v5)
      case (v1, v2, v3, v4, v5, v6) => Seq(v1, v2, v3, v4, v5, v6)
      case (v1, v2, v3, v4, v5, v6, v7) => Seq(v1, v2, v3, v4, v5, v6, v7)
      case (v1, v2, v3, v4, v5, v6, v7, v8) => Seq(v1, v2, v3, v4, v5, v6, v7, v8)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21)
      case (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22) => Seq(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22)
      case v1                       => Seq(v1) // single value is a catch-all so must be last
    }
  }
}
